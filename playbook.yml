---
- hosts: all
  become: true
  gather_facts: true
  
  pre_tasks:
  - name: Create temporary build directory
    file:
      state: directory
      path: "{{ playbook_dir }}/.localtmp"
    delegate_to: localhost
    run_once: true

  - name: Install yum-utils
    yum:
      name: yum-utils
      state: present
    when: (ansible_os_family == 'RedHat' and ansible_distribution_major_version == '7') and ((min_release_7_version is undefined) or (ansible_distribution_version >= min_release_7_version))
    
  - name: Install dnf-utils
    dnf:
      name: dnf-utils
      state: present
    when: ansible_os_family == 'RedHat' and ansible_distribution_major_version == '8'

- hosts: all
  become: true
  gather_facts: true
  serial:
    - 1
    - 1
    - 3
    - 5
    - "25%"

  tasks:
  - include: includes/update-rhel7.yml
    when: (ansible_os_family == 'RedHat' and ansible_distribution_major_version == '7') and ((min_release_7_version is undefined) or (ansible_distribution_version >= min_release_7_version))

  - include: includes/update-rhel8.yml
    when: ansible_os_family == 'RedHat' and ansible_distribution_major_version == '8'

  - name: Reboot hosts
    block:
      - name: Check if reboot is required
        shell: needs-restarting -r
        changed_when: false
        failed_when: reboot_required.rc not in [0,1]
        register: reboot_required
  
      - when: ((reboot_required.rc != 0) and ((need_reboot | bool == true) and (need_reboot is defined))) or ((force_reboot | bool == true) and (force_reboot is defined))
        block:
          - name: Reboot the server
            reboot:
              msg: "Reboot {{ ansible_facts.fqdn }}"
              pre_reboot_delay: 10
              post_reboot_delay: 15 
              connect_timeout: 30
              reboot_timeout: 600
            ignore_errors: true
            changed_when: false
            async: 1
            poll: 0
            register: reboot_result
           
          - set_fact:
              reboot_time: "{{ reboot_result.elapsed }}"
            delegate_facts: true
    tags:
      - reboot
      
  - name: Dump hostvars to JSON
    template:
      src: "includes/hostvars.j2"
      dest: "{{playbook_dir}}/.localtmp/hostvars.json"
    delegate_to: localhost

- hosts: all
  become: true
  gather_facts: true

  post_tasks:
  - include: includes/report.yml

  - name: Check status
    block: 
      - name: Check if check-updates service exists
        stat: path="/etc/systemd/system/check-updates.service"
        register: check_updates_status
        tags:
          - check_update

      - name: Reload systemd service unit for update motd
        systemd:
          name: check-updates.service
          state: started
          masked: no
        when: (check_updates_status.stat.exists == True)
        tags:
          - check_update
    when: ((yum_install_updates is changed) or (dnf_install_updates is changed)) and (reboot_result is skipped)

  - set_fact:
      check_update_status_result: '0'
      cacheable: no
    delegate_facts: true
    when: check_update_status_result is undefined

  - set_fact:
      reboot_time: '0'
      cacheable: no
    delegate_facts: true
    when: reboot_time is undefined
  
  - debug:
      msg: >
       System updates: {{ check_update_status_result }} packages.
       Reboot time: {{ reboot_time }} seconds.
